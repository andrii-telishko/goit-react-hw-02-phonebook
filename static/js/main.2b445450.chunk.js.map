{"version":3,"sources":["components/ContactItem/ContactItem.js","components/ContactsList/ContactsList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js"],"names":["ContactItem","name","number","className","defaultProps","ContactsList","shownContacts","onClick","map","id","type","ContactForm","state","handleChange","e","setState","currentTarget","value","handleSubmit","preventDefault","props","onSubmit","reset","this","onChange","Component","Filter","App","contacts","uuidv4","filter","changeFilter","target","addContact","contact","contactNames","renderContacts","contactsList","contactName","newContact","includes","alert","getFilteredContacts","toLowerCase","deleteContact","contactId","prevState","localStorage","getItem","parsedContacts","JSON","parse","prevProps","nextContacts","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b445450.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ContactItem.scss'\r\n\r\nconst ContactItem = ({name,number}) => {\r\n    return (<>\r\n        <span className='contact-name'>{name}: </span>\r\n        <span className='contact-number'>{number}</span>\r\n    </>);\r\n};\r\n\r\nContactItem.propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.string\r\n}\r\n\r\nContactItem.defaultProps = {\r\n    name: \"Mickey Mouse\",\r\n    number: 123456789\r\n}\r\n\r\nexport default ContactItem","import React from 'react';\r\nimport ContactItem from '../ContactItem';\r\nimport PropTypes from 'prop-types';\r\nimport '../styles/base.scss'\r\nimport './ContactList.scss'\r\n\r\n\r\nconst ContactsList = ({shownContacts, onClick}) => {\r\n    return (\r\n        <ul className='contact-list'>\r\n            {shownContacts().map(({id, name, number}) => {\r\n                return (<li key={id} className='contact-item'><ContactItem\r\n                    name={name}\r\n                    number={number} />\r\n                    <button type='button' onClick={()=>{onClick(id)}} className='button contact-item__button'>Delete</button>\r\n                </li>)\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n\r\nContactsList.propTypes = {\r\n    shownContacts: PropTypes.func.isRequired,\r\n    onClick: PropTypes.func.isRequired\r\n}\r\n\r\nexport default ContactsList;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ContactForm.scss'\r\nimport '../styles/base.scss'\r\n\r\nclass ContactForm extends Component {\r\n    static propTypes = {\r\n       onSubmit: PropTypes.func.isRequired\r\n    };\r\n\r\n    state = {\r\n        name: '',\r\n        number: ''\r\n    };\r\n\r\n     handleChange = (e) => {\r\n         this.setState({ [e.currentTarget.name]: e.currentTarget.value });\r\n    };\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.onSubmit(this.state.name, this.state.number);\r\n        this.reset();\r\n  };\r\n\r\n    reset() {\r\n        this.setState({ name: '', number: '' });\r\n  };\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className='contacts-form'>\r\n                <label className='label'>\r\n                    Name<input\r\n                        type=\"text\"\r\n                        value={this.state.name}\r\n                        onChange={this.handleChange}\r\n                        name=\"name\"\r\n                        className='input' />\r\n                </label>\r\n                <label className='label'>\r\n                    Number<input\r\n                        type=\"tel\"\r\n                        value={this.state.number}\r\n                        onChange={this.handleChange}\r\n                        name=\"number\"\r\n                    className='input'/>\r\n                </label>\r\n                <button type=\"submit\" className='button contacts-form__button'>Add contact</button>\r\n            </form>\r\n        );\r\n    };\r\n};\r\n\r\nexport default ContactForm;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../styles/base.scss'\r\n\r\nconst Filter = ({value, onChange}) => {\r\n    return (\r\n        <label className='label'>\r\n            Find contact by name\r\n         <input\r\n            type=\"text\"\r\n            value={value}\r\n            onChange={onChange}\r\n            className='input'/>\r\n        </label>\r\n    );\r\n};\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Filter;","import './App.css';\nimport React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport ContactsList from \"./components/ContactsList\";\nimport ContactForm from \"./components/ContactForm\";\nimport Filter from \"./components/Filter\"\n\nclass App extends Component {\n  state = {\n    contacts: [{id: uuidv4(), name: 'Rosie Simpson', number: '459-12-56'},\n               {id: uuidv4(), name: 'Hermione Kline', number: '443-89-12'},\n               {id: uuidv4(), name: 'Eden Clements', number: '645-17-79'},\n               { id: uuidv4(), name: 'Annie Copeland', number: '227-91-26' }\n    ],\n    filter: ''\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const nextContacts = this.state.contacts;\n    const prevContacts = prevState.contacts;\n\n    if (nextContacts !== prevContacts) {\n           localStorage.setItem('contacts', JSON.stringify(nextContacts));\n    };\n};\n\n  changeFilter = (e) => {\n    this.setState({ filter: e.target.value });\n  };\n\n   addContact = (name, number) => {\n    const contact = {\n      id: uuidv4(),\n      name,\n      number\n    };\n    const contactNames = this.state.contacts.map(contact => contact.name);\n    this.renderContacts(contactNames, contact.name, contact);\n   };\n  \n  renderContacts = (contactsList, contactName, newContact) => {\n    if (contactsList.includes(contactName)) {\n      alert(`${contactName} is already in contacts`)\n    } else {\n      this.setState(({ contacts }) => ({\n        contacts: [...contacts, newContact],\n      }));\n    };\n  };\n    \n   getFilteredContacts = () => {\n    return this.state.contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(this.state.filter.toLowerCase())\n    })\n   };\n  \n  deleteContact = (contactId) => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  render() {\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <ContactForm\n          onSubmit={this.addContact}/>\n        <h2>Contacts</h2>\n        <Filter\n          value={this.state.filter}\n          onChange={ this.changeFilter }/>\n        <ContactsList\n          shownContacts={this.getFilteredContacts}\n          onClick={  this.deleteContact}/>\n      </>\n     )\n  };\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}